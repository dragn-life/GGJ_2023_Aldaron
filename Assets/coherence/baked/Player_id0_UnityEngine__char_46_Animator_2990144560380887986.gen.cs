// Copyright (c) coherence ApS.
// For all coherence generated code, the coherence SDK license terms apply. See the license file in the coherence Package root folder for more information.

// <auto-generated>
// Generated file. DO NOT EDIT!
// </auto-generated>
namespace Coherence.Generated
{
	using Coherence.ProtocolDef;
	using Coherence.Serializer;
	using Coherence.SimulationFrame;
	using Coherence.Entity;
	using Coherence.Utils;
	using Coherence.Brook;
	using Coherence.Toolkit;
	using UnityEngine;

	public struct Player_id0_UnityEngine__char_46_Animator_2990144560380887986 : ICoherenceComponentData
	{
		public bool idle2;
		public bool front_walk;
		public bool back_walk;
		public bool right__char_32_walk;
		public bool left__char_32_walk;
		public bool depence;
		public bool walk;
		public bool run;
		public bool back__char_45_walk;
		public bool back__char_45_run;
		public bool jump01;
		public bool sit__char_32_down;
		public bool stand__char_32_up;
		public bool jump02;
		public bool jump03;
		public bool idle02;
		public bool walk__char_45_carefully;
		public bool right__char_32_hook;
		public bool left__char_32_hook;
		public bool right__char_45_left__char_32_hook;
		public bool idle03;
		public bool hit01;
		public bool hit02;
		public bool hit03;
		public bool die;

		public override string ToString()
		{
			return $"Player_id0_UnityEngine__char_46_Animator_2990144560380887986(idle2: {idle2}, front_walk: {front_walk}, back_walk: {back_walk}, right__char_32_walk: {right__char_32_walk}, left__char_32_walk: {left__char_32_walk}, depence: {depence}, walk: {walk}, run: {run}, back__char_45_walk: {back__char_45_walk}, back__char_45_run: {back__char_45_run}, jump01: {jump01}, sit__char_32_down: {sit__char_32_down}, stand__char_32_up: {stand__char_32_up}, jump02: {jump02}, jump03: {jump03}, idle02: {idle02}, walk__char_45_carefully: {walk__char_45_carefully}, right__char_32_hook: {right__char_32_hook}, left__char_32_hook: {left__char_32_hook}, right__char_45_left__char_32_hook: {right__char_45_left__char_32_hook}, idle03: {idle03}, hit01: {hit01}, hit02: {hit02}, hit03: {hit03}, die: {die})";
		}

		public uint GetComponentType() => Definition.InternalPlayer_id0_UnityEngine__char_46_Animator_2990144560380887986;

		public const int order = 0;

		public int GetComponentOrder() => order;

		public AbsoluteSimulationFrame Frame;
	

		public void SetSimulationFrame(AbsoluteSimulationFrame frame)
		{
			Frame = frame;
		}

		public AbsoluteSimulationFrame GetSimulationFrame() => Frame;

		public ICoherenceComponentData MergeWith(ICoherenceComponentData data, uint mask)
		{
			var other = (Player_id0_UnityEngine__char_46_Animator_2990144560380887986)data;
			if ((mask & 0x01) != 0)
			{
				Frame = other.Frame;
				idle2 = other.idle2;
			}
			mask >>= 1;
			if ((mask & 0x01) != 0)
			{
				Frame = other.Frame;
				front_walk = other.front_walk;
			}
			mask >>= 1;
			if ((mask & 0x01) != 0)
			{
				Frame = other.Frame;
				back_walk = other.back_walk;
			}
			mask >>= 1;
			if ((mask & 0x01) != 0)
			{
				Frame = other.Frame;
				right__char_32_walk = other.right__char_32_walk;
			}
			mask >>= 1;
			if ((mask & 0x01) != 0)
			{
				Frame = other.Frame;
				left__char_32_walk = other.left__char_32_walk;
			}
			mask >>= 1;
			if ((mask & 0x01) != 0)
			{
				Frame = other.Frame;
				depence = other.depence;
			}
			mask >>= 1;
			if ((mask & 0x01) != 0)
			{
				Frame = other.Frame;
				walk = other.walk;
			}
			mask >>= 1;
			if ((mask & 0x01) != 0)
			{
				Frame = other.Frame;
				run = other.run;
			}
			mask >>= 1;
			if ((mask & 0x01) != 0)
			{
				Frame = other.Frame;
				back__char_45_walk = other.back__char_45_walk;
			}
			mask >>= 1;
			if ((mask & 0x01) != 0)
			{
				Frame = other.Frame;
				back__char_45_run = other.back__char_45_run;
			}
			mask >>= 1;
			if ((mask & 0x01) != 0)
			{
				Frame = other.Frame;
				jump01 = other.jump01;
			}
			mask >>= 1;
			if ((mask & 0x01) != 0)
			{
				Frame = other.Frame;
				sit__char_32_down = other.sit__char_32_down;
			}
			mask >>= 1;
			if ((mask & 0x01) != 0)
			{
				Frame = other.Frame;
				stand__char_32_up = other.stand__char_32_up;
			}
			mask >>= 1;
			if ((mask & 0x01) != 0)
			{
				Frame = other.Frame;
				jump02 = other.jump02;
			}
			mask >>= 1;
			if ((mask & 0x01) != 0)
			{
				Frame = other.Frame;
				jump03 = other.jump03;
			}
			mask >>= 1;
			if ((mask & 0x01) != 0)
			{
				Frame = other.Frame;
				idle02 = other.idle02;
			}
			mask >>= 1;
			if ((mask & 0x01) != 0)
			{
				Frame = other.Frame;
				walk__char_45_carefully = other.walk__char_45_carefully;
			}
			mask >>= 1;
			if ((mask & 0x01) != 0)
			{
				Frame = other.Frame;
				right__char_32_hook = other.right__char_32_hook;
			}
			mask >>= 1;
			if ((mask & 0x01) != 0)
			{
				Frame = other.Frame;
				left__char_32_hook = other.left__char_32_hook;
			}
			mask >>= 1;
			if ((mask & 0x01) != 0)
			{
				Frame = other.Frame;
				right__char_45_left__char_32_hook = other.right__char_45_left__char_32_hook;
			}
			mask >>= 1;
			if ((mask & 0x01) != 0)
			{
				Frame = other.Frame;
				idle03 = other.idle03;
			}
			mask >>= 1;
			if ((mask & 0x01) != 0)
			{
				Frame = other.Frame;
				hit01 = other.hit01;
			}
			mask >>= 1;
			if ((mask & 0x01) != 0)
			{
				Frame = other.Frame;
				hit02 = other.hit02;
			}
			mask >>= 1;
			if ((mask & 0x01) != 0)
			{
				Frame = other.Frame;
				hit03 = other.hit03;
			}
			mask >>= 1;
			if ((mask & 0x01) != 0)
			{
				Frame = other.Frame;
				die = other.die;
			}
			mask >>= 1;
			return this;
		}

		public static void Serialize(Player_id0_UnityEngine__char_46_Animator_2990144560380887986 data, uint mask, IOutProtocolBitStream bitStream)
		{
			if (bitStream.WriteMask((mask & 0x01) != 0))
			{
				bitStream.WriteBool(data.idle2);
			}
			mask >>= 1;
			if (bitStream.WriteMask((mask & 0x01) != 0))
			{
				bitStream.WriteBool(data.front_walk);
			}
			mask >>= 1;
			if (bitStream.WriteMask((mask & 0x01) != 0))
			{
				bitStream.WriteBool(data.back_walk);
			}
			mask >>= 1;
			if (bitStream.WriteMask((mask & 0x01) != 0))
			{
				bitStream.WriteBool(data.right__char_32_walk);
			}
			mask >>= 1;
			if (bitStream.WriteMask((mask & 0x01) != 0))
			{
				bitStream.WriteBool(data.left__char_32_walk);
			}
			mask >>= 1;
			if (bitStream.WriteMask((mask & 0x01) != 0))
			{
				bitStream.WriteBool(data.depence);
			}
			mask >>= 1;
			if (bitStream.WriteMask((mask & 0x01) != 0))
			{
				bitStream.WriteBool(data.walk);
			}
			mask >>= 1;
			if (bitStream.WriteMask((mask & 0x01) != 0))
			{
				bitStream.WriteBool(data.run);
			}
			mask >>= 1;
			if (bitStream.WriteMask((mask & 0x01) != 0))
			{
				bitStream.WriteBool(data.back__char_45_walk);
			}
			mask >>= 1;
			if (bitStream.WriteMask((mask & 0x01) != 0))
			{
				bitStream.WriteBool(data.back__char_45_run);
			}
			mask >>= 1;
			if (bitStream.WriteMask((mask & 0x01) != 0))
			{
				bitStream.WriteBool(data.jump01);
			}
			mask >>= 1;
			if (bitStream.WriteMask((mask & 0x01) != 0))
			{
				bitStream.WriteBool(data.sit__char_32_down);
			}
			mask >>= 1;
			if (bitStream.WriteMask((mask & 0x01) != 0))
			{
				bitStream.WriteBool(data.stand__char_32_up);
			}
			mask >>= 1;
			if (bitStream.WriteMask((mask & 0x01) != 0))
			{
				bitStream.WriteBool(data.jump02);
			}
			mask >>= 1;
			if (bitStream.WriteMask((mask & 0x01) != 0))
			{
				bitStream.WriteBool(data.jump03);
			}
			mask >>= 1;
			if (bitStream.WriteMask((mask & 0x01) != 0))
			{
				bitStream.WriteBool(data.idle02);
			}
			mask >>= 1;
			if (bitStream.WriteMask((mask & 0x01) != 0))
			{
				bitStream.WriteBool(data.walk__char_45_carefully);
			}
			mask >>= 1;
			if (bitStream.WriteMask((mask & 0x01) != 0))
			{
				bitStream.WriteBool(data.right__char_32_hook);
			}
			mask >>= 1;
			if (bitStream.WriteMask((mask & 0x01) != 0))
			{
				bitStream.WriteBool(data.left__char_32_hook);
			}
			mask >>= 1;
			if (bitStream.WriteMask((mask & 0x01) != 0))
			{
				bitStream.WriteBool(data.right__char_45_left__char_32_hook);
			}
			mask >>= 1;
			if (bitStream.WriteMask((mask & 0x01) != 0))
			{
				bitStream.WriteBool(data.idle03);
			}
			mask >>= 1;
			if (bitStream.WriteMask((mask & 0x01) != 0))
			{
				bitStream.WriteBool(data.hit01);
			}
			mask >>= 1;
			if (bitStream.WriteMask((mask & 0x01) != 0))
			{
				bitStream.WriteBool(data.hit02);
			}
			mask >>= 1;
			if (bitStream.WriteMask((mask & 0x01) != 0))
			{
				bitStream.WriteBool(data.hit03);
			}
			mask >>= 1;
			if (bitStream.WriteMask((mask & 0x01) != 0))
			{
				bitStream.WriteBool(data.die);
			}
			mask >>= 1;
		}

		public static (Player_id0_UnityEngine__char_46_Animator_2990144560380887986, uint, uint?) Deserialize(InProtocolBitStream bitStream)
		{
			var mask = (uint)0;
			var val = new Player_id0_UnityEngine__char_46_Animator_2990144560380887986();
	
			if (bitStream.ReadMask())
			{
				val.idle2 = bitStream.ReadBool();
				mask |= 0b00000000000000000000000000000001;
			}
			if (bitStream.ReadMask())
			{
				val.front_walk = bitStream.ReadBool();
				mask |= 0b00000000000000000000000000000010;
			}
			if (bitStream.ReadMask())
			{
				val.back_walk = bitStream.ReadBool();
				mask |= 0b00000000000000000000000000000100;
			}
			if (bitStream.ReadMask())
			{
				val.right__char_32_walk = bitStream.ReadBool();
				mask |= 0b00000000000000000000000000001000;
			}
			if (bitStream.ReadMask())
			{
				val.left__char_32_walk = bitStream.ReadBool();
				mask |= 0b00000000000000000000000000010000;
			}
			if (bitStream.ReadMask())
			{
				val.depence = bitStream.ReadBool();
				mask |= 0b00000000000000000000000000100000;
			}
			if (bitStream.ReadMask())
			{
				val.walk = bitStream.ReadBool();
				mask |= 0b00000000000000000000000001000000;
			}
			if (bitStream.ReadMask())
			{
				val.run = bitStream.ReadBool();
				mask |= 0b00000000000000000000000010000000;
			}
			if (bitStream.ReadMask())
			{
				val.back__char_45_walk = bitStream.ReadBool();
				mask |= 0b00000000000000000000000100000000;
			}
			if (bitStream.ReadMask())
			{
				val.back__char_45_run = bitStream.ReadBool();
				mask |= 0b00000000000000000000001000000000;
			}
			if (bitStream.ReadMask())
			{
				val.jump01 = bitStream.ReadBool();
				mask |= 0b00000000000000000000010000000000;
			}
			if (bitStream.ReadMask())
			{
				val.sit__char_32_down = bitStream.ReadBool();
				mask |= 0b00000000000000000000100000000000;
			}
			if (bitStream.ReadMask())
			{
				val.stand__char_32_up = bitStream.ReadBool();
				mask |= 0b00000000000000000001000000000000;
			}
			if (bitStream.ReadMask())
			{
				val.jump02 = bitStream.ReadBool();
				mask |= 0b00000000000000000010000000000000;
			}
			if (bitStream.ReadMask())
			{
				val.jump03 = bitStream.ReadBool();
				mask |= 0b00000000000000000100000000000000;
			}
			if (bitStream.ReadMask())
			{
				val.idle02 = bitStream.ReadBool();
				mask |= 0b00000000000000001000000000000000;
			}
			if (bitStream.ReadMask())
			{
				val.walk__char_45_carefully = bitStream.ReadBool();
				mask |= 0b00000000000000010000000000000000;
			}
			if (bitStream.ReadMask())
			{
				val.right__char_32_hook = bitStream.ReadBool();
				mask |= 0b00000000000000100000000000000000;
			}
			if (bitStream.ReadMask())
			{
				val.left__char_32_hook = bitStream.ReadBool();
				mask |= 0b00000000000001000000000000000000;
			}
			if (bitStream.ReadMask())
			{
				val.right__char_45_left__char_32_hook = bitStream.ReadBool();
				mask |= 0b00000000000010000000000000000000;
			}
			if (bitStream.ReadMask())
			{
				val.idle03 = bitStream.ReadBool();
				mask |= 0b00000000000100000000000000000000;
			}
			if (bitStream.ReadMask())
			{
				val.hit01 = bitStream.ReadBool();
				mask |= 0b00000000001000000000000000000000;
			}
			if (bitStream.ReadMask())
			{
				val.hit02 = bitStream.ReadBool();
				mask |= 0b00000000010000000000000000000000;
			}
			if (bitStream.ReadMask())
			{
				val.hit03 = bitStream.ReadBool();
				mask |= 0b00000000100000000000000000000000;
			}
			if (bitStream.ReadMask())
			{
				val.die = bitStream.ReadBool();
				mask |= 0b00000001000000000000000000000000;
			}
			return (val, mask, null);
		}
		public static (Player_id0_UnityEngine__char_46_Animator_2990144560380887986, uint, uint?) DeserializeArchetypePlayer_f14974ba2498d4ab0b5812581fe716bd_Player_id0_UnityEngine__char_46_Animator_2990144560380887986_LOD0(InProtocolBitStream bitStream)
		{
			var mask = (uint)0;
			var val = new Player_id0_UnityEngine__char_46_Animator_2990144560380887986();
			if (bitStream.ReadMask())
			{
				val.idle2 = bitStream.ReadBool();
				mask |= 0b00000000000000000000000000000001;
			}
			if (bitStream.ReadMask())
			{
				val.front_walk = bitStream.ReadBool();
				mask |= 0b00000000000000000000000000000010;
			}
			if (bitStream.ReadMask())
			{
				val.back_walk = bitStream.ReadBool();
				mask |= 0b00000000000000000000000000000100;
			}
			if (bitStream.ReadMask())
			{
				val.right__char_32_walk = bitStream.ReadBool();
				mask |= 0b00000000000000000000000000001000;
			}
			if (bitStream.ReadMask())
			{
				val.left__char_32_walk = bitStream.ReadBool();
				mask |= 0b00000000000000000000000000010000;
			}
			if (bitStream.ReadMask())
			{
				val.depence = bitStream.ReadBool();
				mask |= 0b00000000000000000000000000100000;
			}
			if (bitStream.ReadMask())
			{
				val.walk = bitStream.ReadBool();
				mask |= 0b00000000000000000000000001000000;
			}
			if (bitStream.ReadMask())
			{
				val.run = bitStream.ReadBool();
				mask |= 0b00000000000000000000000010000000;
			}
			if (bitStream.ReadMask())
			{
				val.back__char_45_walk = bitStream.ReadBool();
				mask |= 0b00000000000000000000000100000000;
			}
			if (bitStream.ReadMask())
			{
				val.back__char_45_run = bitStream.ReadBool();
				mask |= 0b00000000000000000000001000000000;
			}
			if (bitStream.ReadMask())
			{
				val.jump01 = bitStream.ReadBool();
				mask |= 0b00000000000000000000010000000000;
			}
			if (bitStream.ReadMask())
			{
				val.sit__char_32_down = bitStream.ReadBool();
				mask |= 0b00000000000000000000100000000000;
			}
			if (bitStream.ReadMask())
			{
				val.stand__char_32_up = bitStream.ReadBool();
				mask |= 0b00000000000000000001000000000000;
			}
			if (bitStream.ReadMask())
			{
				val.jump02 = bitStream.ReadBool();
				mask |= 0b00000000000000000010000000000000;
			}
			if (bitStream.ReadMask())
			{
				val.jump03 = bitStream.ReadBool();
				mask |= 0b00000000000000000100000000000000;
			}
			if (bitStream.ReadMask())
			{
				val.idle02 = bitStream.ReadBool();
				mask |= 0b00000000000000001000000000000000;
			}
			if (bitStream.ReadMask())
			{
				val.walk__char_45_carefully = bitStream.ReadBool();
				mask |= 0b00000000000000010000000000000000;
			}
			if (bitStream.ReadMask())
			{
				val.right__char_32_hook = bitStream.ReadBool();
				mask |= 0b00000000000000100000000000000000;
			}
			if (bitStream.ReadMask())
			{
				val.left__char_32_hook = bitStream.ReadBool();
				mask |= 0b00000000000001000000000000000000;
			}
			if (bitStream.ReadMask())
			{
				val.right__char_45_left__char_32_hook = bitStream.ReadBool();
				mask |= 0b00000000000010000000000000000000;
			}
			if (bitStream.ReadMask())
			{
				val.idle03 = bitStream.ReadBool();
				mask |= 0b00000000000100000000000000000000;
			}
			if (bitStream.ReadMask())
			{
				val.hit01 = bitStream.ReadBool();
				mask |= 0b00000000001000000000000000000000;
			}
			if (bitStream.ReadMask())
			{
				val.hit02 = bitStream.ReadBool();
				mask |= 0b00000000010000000000000000000000;
			}
			if (bitStream.ReadMask())
			{
				val.hit03 = bitStream.ReadBool();
				mask |= 0b00000000100000000000000000000000;
			}
			if (bitStream.ReadMask())
			{
				val.die = bitStream.ReadBool();
				mask |= 0b00000001000000000000000000000000;
			}

			return (val, mask, 0);
		}

		/// <summary>
		/// Resets byte array references to the local array instance that is kept in the lastSentData.
		/// If the array content has changed but remains of same length, the new content is copied into the local array instance.
		/// If the array length has changed, the array is cloned and overwrites the local instance.
		/// If the array has not changed, the reference is reset to the local array instance.
		/// Otherwise, changes to other fields on the component might cause the local array instance reference to become permanently lost.
		/// </summary>
		public void ResetByteArrays(ICoherenceComponentData lastSent, uint mask)
		{
			var last = lastSent as Player_id0_UnityEngine__char_46_Animator_2990144560380887986?;
	
		}
	}
}